[tool.poetry]
name = "backend"
version = "0.1.0"
description = ""
authors = ["nathan sun <nathanprogsun@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
flask = "^3.1.1"
flask-cors = "^6.0.0"
email-validator = "^2.2.0"
pydantic = "^2.11.5"
pydantic-settings = "^2.9.1"
alembic = "^1.16.1"
yarl = "^1.20.0"
loguru = "^0.7.3"
flasgger = "^0.9.7.1"
sqlalchemy = "^2.0.41"
pytest = "^8.3.5"
pytest-flask = "^1.3.0"
faker = "^37.3.0"
flask-session = "^0.8.0"
itsdangerous = "^2.2.0"
cachelib = "^0.13.0"
requests = "^2.32.3"


[tool.poetry.group.dev.dependencies]
ruff = "^0.11.12"
mypy = "^1.16.0"
types-flask-cors = "^6.0.0.20250520"
sqlalchemy = {extras = ["mypy"], version = "^2.0.41"}

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
# Assume Python 3.12.
target-version = "py312"
# Same as Black.
line-length = 88

[tool.ruff.lint]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
select = ["E", "F", "W", "I", "N", "UP", "S", "B", "A", "C4", "ICN", "PIE", "PYI", "RSE", "RET", "SIM", "TCH", "ARG", "PTH", "ERA", "PL", "TRY", "NPY", "PERF", "FURB", "LOG", "RUF"]
ignore = [
    "E501", "F401", "PLR0913", "PLR0912", "PLR0915", "PLR2004", 
    "S101", "TRY003", "TRY400", "B008", "S311", "S105", "S106", 
    "ARG001", "ARG002", "B007", "ERA001",
    # Additional ignores for simplification
    "PLW0603",  # Global statement usage (common in database modules)
    "PLW0602",  # Global without assignment
    "TRY301",   # Abstract raise to inner function (overly restrictive)
    "B904",     # Exception chaining (not always necessary)
    "UP035",    # typing.Dict/List deprecated (can be updated gradually)
    "A002",     # Argument shadows builtin (id is common parameter name)
    "PTH103", "PTH108", "PTH120",  # Path usage (os.path is fine for compatibility)
    "S104",     # Binding to all interfaces (needed for development)
    "E402",     # Module import not at top (needed for Alembic)
    "N818",     # Exception naming (APIException is fine)
    "ARG004", "ARG005",  # Unused arguments (common in decorators/frameworks)
    "S603",     # subprocess usage (needed for scripts)
    "TRY300",   # else block suggestion
    "RUF001",   # Ambiguous unicode characters (supports international content)
    "SIM117",   # Nested with statements
    # Additional ignores for current errors
    "PTH100",   # os.path.abspath() -> Path.resolve() (compatibility)
    "PTH118",   # os.path.join() -> Path (compatibility)
    "PTH123",   # open() -> Path.open() (compatibility)
    "RUF002",   # Ambiguous unicode characters in docstrings (supports Chinese content)
    "RUF003",   # Ambiguous unicode characters in comments (supports Chinese content)
    "W291",     # Trailing whitespace (auto-fixable)
    "B023",     # Function definition in loop (acceptable in specific cases)
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"